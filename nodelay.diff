diff --git a/deps/luajit b/deps/luajit
--- a/deps/luajit
+++ b/deps/luajit
@@ -1 +1 @@
-Subproject commit 120c3adbff2acbbee5932f28345cde292ef044ec
+Subproject commit 120c3adbff2acbbee5932f28345cde292ef044ec-dirty
diff --git a/examples/timers-simple.lua b/examples/timers-simple.lua
index 4015e10..2bc4499 100644
--- a/examples/timers-simple.lua
+++ b/examples/timers-simple.lua
@@ -9,5 +9,10 @@ Timer.set_timeout(1000, function ()
   p("on_timeout!")
   Timer.clear_timer(interval)
 end)
+print("Starting 2000ms timer with parameters")
+Timer.set_timeout(1000, function (...)
+  p("on_timeout!", ...)
+  Timer.clear_timer(interval)
+end, 1, 2, 3)
 
 
diff --git a/lib/http.lua b/lib/http.lua
index 6d7d429..5ceed7c 100644
--- a/lib/http.lua
+++ b/lib/http.lua
@@ -41,7 +41,7 @@ function HTTP.create_server(host, port, on_connection)
       on_headers_complete = function (info)
         request.method = info.method
         if info.upgrade then
-          server:emit("upgrade", request, client)
+          server:emit("upgrade", request, response)
         else
           on_connection(request, response)
         end
@@ -54,11 +54,11 @@ function HTTP.create_server(host, port, on_connection)
         request:emit('end')
       end
     })
-    
+
     client:on("data", function (chunk, len)
       if len == 0 then return end
-      local nparsed = parser:execute(chunk, 0, len)
-      if nparsed < len then
+      local nparsed, upgrade = parser:execute(chunk, 0, len)
+      if nparsed < len and not upgrade then
         request:emit("error", "parse error")
       end
     end)
@@ -68,7 +68,7 @@ function HTTP.create_server(host, port, on_connection)
     end)
 
   end)
-  
+
   return server
 end
 
diff --git a/lib/timer.lua b/lib/timer.lua
index 4a66b91..57725e0 100644
--- a/lib/timer.lua
+++ b/lib/timer.lua
@@ -1,18 +1,20 @@
 local UV = require('uv')
 
-local function set_timeout(duration, callback)
+local function set_timeout(duration, callback, ...)
+  local args = {...}
   local timer = UV.new_timer()
   timer:start(duration, 0, function (status)
     timer:close()
-    callback()
+    callback(unpack(args))
   end)
   return timer
 end
 
-local function set_interval(period, callback)
+local function set_interval(period, callback, ...)
+  local args = {...}
   local timer = UV.new_timer()
   timer:start(period, period, function (status)
-    callback()
+    callback(unpack(args))
   end)
   return timer
 end
diff --git a/src/lhttp_parser.c b/src/lhttp_parser.c
index 4046e96..174f01c 100644
--- a/src/lhttp_parser.c
+++ b/src/lhttp_parser.c
@@ -267,7 +267,8 @@ static int lhttp_parser_execute (lua_State *L) {
   size_t nparsed = http_parser_execute(parser, &lhttp_parser_settings, chunk + offset, length);
 
   lua_pushnumber(L, nparsed);
-  return 1;
+  lua_pushnumber(L, parser->upgrade);
+  return 2;
 }
 
 static int lhttp_parser_finish (lua_State *L) {
diff --git a/src/luv.c b/src/luv.c
index 7d40269..9bac004 100644
--- a/src/luv.c
+++ b/src/luv.c
@@ -66,6 +66,7 @@ static const luaL_reg luv_f[] = {
   {"tcp_getpeername", luv_tcp_getpeername},
   {"tcp_connect", luv_tcp_connect},
   {"tcp_connect6", luv_tcp_connect6},
+  {"tcp_nodelay", luv_tcp_nodelay},
 
   // Pipe functions
   {"new_pipe", luv_new_pipe},
@@ -177,6 +178,7 @@ static const luaL_reg luv_tcp_m[] = {
   {"getpeername", luv_tcp_getpeername},
   {"connect", luv_tcp_connect},
   {"connect6", luv_tcp_connect6},
+  {"nodelay", luv_tcp_nodelay},
   {NULL, NULL}
 };
 
diff --git a/src/luv_tcp.c b/src/luv_tcp.c
index eb78238..10ddd9a 100644
--- a/src/luv_tcp.c
+++ b/src/luv_tcp.c
@@ -63,6 +63,22 @@ int luv_tcp_bind6(lua_State* L) {
   return 0;
 }
 
+int luv_tcp_nodelay(lua_State* L) {
+  int before = lua_gettop(L);
+  uv_tcp_t* handle = (uv_tcp_t*)luv_checkudata(L, 1, "tcp");
+  int value = lua_toboolean(L, 2);
+
+  int status = setsockopt(handle->fd, IPPROTO_TCP, TCP_NODELAY, &value, sizeof(int));
+
+  if (status == -1) {
+    uv_err_t err = uv_last_error(uv_default_loop());
+    return luaL_error(L, "tcp_nodelay: %s", uv_strerror(err));
+  }
+
+  assert(lua_gettop(L) == before);
+  return 0;
+}
+
 int luv_tcp_getsockname(lua_State* L) {
   int before = lua_gettop(L);
   uv_tcp_t* handle = (uv_tcp_t*)luv_checkudata(L, 1, "tcp");
diff --git a/src/luv_tcp.h b/src/luv_tcp.h
index a473000..f7415c9 100644
--- a/src/luv_tcp.h
+++ b/src/luv_tcp.h
@@ -27,5 +27,6 @@ int luv_tcp_getsockname(lua_State* L);
 int luv_tcp_getpeername(lua_State* L);
 int luv_tcp_connect(lua_State* L);
 int luv_tcp_connect6(lua_State* L);
+int luv_tcp_nodelay(lua_State* L);
 
 #endif
